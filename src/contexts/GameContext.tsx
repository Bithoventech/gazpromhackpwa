import { createContext, useContext, useState, useEffect, ReactNode } from 'react';

export interface Quest {
  id: string;
  title: string;
  description: string;
  category: 'budgeting' | 'saving' | 'investing' | 'debt';
  difficulty: 'easy' | 'medium' | 'hard';
  reward: number;
  xpReward: number;
  progress: number;
  completed: boolean;
  icon: string;
}

export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  unlocked: boolean;
  unlockedAt?: Date;
}

export interface ShopItem {
  id: string;
  name: string;
  description: string;
  price: number;
  icon: string;
  purchased: boolean;
}

export interface UserProfile {
  name: string;
  avatar: string;
  level: number;
  xp: number;
  coins: number;
  completedQuests: number;
  unlockedAchievements: number;
}

interface GameContextType {
  userProfile: UserProfile;
  quests: Quest[];
  achievements: Achievement[];
  shopItems: ShopItem[];
  hasCompletedOnboarding: boolean;
  completeOnboarding: () => void;
  updateQuest: (questId: string, progress: number) => void;
  completeQuest: (questId: string) => void;
  unlockAchievement: (achievementId: string) => void;
  purchaseItem: (itemId: string) => void;
  updateProfile: (updates: Partial<UserProfile>) => void;
}

const GameContext = createContext<GameContextType | undefined>(undefined);

const STORAGE_KEY = 'finquest_game_data';

const initialQuests: Quest[] = [
  {
    id: 'safety-cushion',
    title: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Å–≤–æ–±–æ–¥–µ',
    description: '–û—Å–≤–æ–π –Ω–∞–≤—ã–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –Ω–∞—É—á–∏—Å—å –≥—Ä–∞–º–æ—Ç–Ω–æ–º—É –≤—ã–±–æ—Ä—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
    category: 'saving',
    difficulty: 'easy',
    reward: 75,
    xpReward: 50,
    progress: 0,
    completed: false,
    icon: 'üõ°Ô∏è',
  },
  {
    id: 'investment-start',
    title: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç ‚Äî —É–ø—Ä–∞–≤–ª—è–π –±—É–¥—É—â–∏–º —Å–µ–≥–æ–¥–Ω—è!',
    description: '–û—Å–≤–æ–π –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å',
    category: 'investing',
    difficulty: 'medium',
    reward: 100,
    xpReward: 60,
    progress: 0,
    completed: false,
    icon: 'üìà',
  },
  {
    id: 'antifraud',
    title: '–ê–Ω—Ç–∏—Ñ—Ä–æ–¥: –°—Ç–∞–Ω—å –ª–æ–≤—Ü–æ–º –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤!',
    description: '–ù–∞—É—á–∏—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã –∏ –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã',
    category: 'saving',
    difficulty: 'medium',
    reward: 75,
    xpReward: 60,
    progress: 0,
    completed: false,
    icon: 'üïµÔ∏è',
  },
  {
    id: '1',
    title: '–°–æ–∑–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –±—é–¥–∂–µ—Ç',
    description: '–ù–∞—É—á–∏—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã',
    category: 'budgeting',
    difficulty: 'easy',
    reward: 100,
    xpReward: 50,
    progress: 0,
    completed: false,
    icon: 'üìä',
  },
  {
    id: '2',
    title: '–°–±–µ—Ä–µ–≥–∏ 1000 —Ä—É–±–ª–µ–π',
    description: '–ù–∞—á–Ω–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É',
    category: 'saving',
    difficulty: 'easy',
    reward: 150,
    xpReward: 75,
    progress: 0,
    completed: false,
    icon: 'üí∞',
  },
  {
    id: '3',
    title: '–ò–∑—É—á–∏ –æ—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
    description: '–£–∑–Ω–∞–π, –∫–∞–∫ –∑–∞—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ç–µ–±—è',
    category: 'investing',
    difficulty: 'medium',
    reward: 200,
    xpReward: 100,
    progress: 0,
    completed: false,
    icon: 'üìà',
  },
  {
    id: '4',
    title: '–ó–∞–∫—Ä–æ–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç',
    description: '–ù–∞—É—á–∏—Å—å —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–ª–≥–∞–º–∏',
    category: 'debt',
    difficulty: 'hard',
    reward: 300,
    xpReward: 150,
    progress: 0,
    completed: false,
    icon: 'üí≥',
  },
];

const initialAchievements: Achievement[] = [
  { id: '1', title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', description: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', icon: 'üéØ', unlocked: false },
  { id: '2', title: '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å', description: '–ù–∞–∫–æ–ø–ª–µ–Ω–æ 1000 –º–æ–Ω–µ—Ç', icon: 'üíé', unlocked: false },
  { id: '3', title: '–ò–Ω–≤–µ—Å—Ç–æ—Ä', description: '–ò–∑—É—á–µ–Ω—ã –æ—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', icon: 'üìä', unlocked: false },
  { id: '4', title: '–ú–∞—Å—Ç–µ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤', description: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ 10 –∫–≤–µ—Å—Ç–æ–≤', icon: 'üëë', unlocked: false },
];

const initialShopItems: ShopItem[] = [
  { id: '1', name: '–ó–æ–ª–æ—Ç–æ–π –∞–≤–∞—Ç–∞—Ä', description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞', price: 500, icon: 'üèÜ', purchased: false },
  { id: '2', name: '–£–¥–≤–æ–µ–Ω–∏–µ XP', description: '–ü–æ–ª—É—á–∞–π —É–¥–≤–æ–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –Ω–∞ 1 –¥–µ–Ω—å', price: 300, icon: '‚ö°', purchased: false },
  { id: '3', name: '–ü–æ–¥—Å–∫–∞–∑–∫–∞', description: '–ü–æ–ª—É—á–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞', price: 100, icon: 'üí°', purchased: false },
];

const initialUserProfile: UserProfile = {
  name: '–ò–≥—Ä–æ–∫',
  avatar: 'üë§',
  level: 1,
  xp: 0,
  coins: 0,
  completedQuests: 0,
  unlockedAchievements: 0,
};

export function GameProvider({ children }: { children: ReactNode }) {
  const [hasCompletedOnboarding, setHasCompletedOnboarding] = useState(false);
  const [userProfile, setUserProfile] = useState<UserProfile>(initialUserProfile);
  const [quests, setQuests] = useState<Quest[]>(initialQuests);
  const [achievements, setAchievements] = useState<Achievement[]>(initialAchievements);
  const [shopItems, setShopItems] = useState<ShopItem[]>(initialShopItems);

  // Load from localStorage on mount
  useEffect(() => {
    const savedData = localStorage.getItem(STORAGE_KEY);
    if (savedData) {
      try {
        const data = JSON.parse(savedData);
        setHasCompletedOnboarding(data.hasCompletedOnboarding || false);
        setUserProfile(data.userProfile || initialUserProfile);

        // Merge saved quests with initial ones (add new quests, keep progress/completion)
        const savedQuests: Quest[] = Array.isArray(data.quests) ? data.quests : [];
        const savedById = new Map(savedQuests.map((q) => [q.id, q]));

        // Start from initial to ensure new definitions/titles are present, but keep user's progress/completion
        const mergedBase = initialQuests.map((initQ) => {
          const existing = savedById.get(initQ.id);
          return existing ? { ...initQ, ...existing } : initQ;
        });

        // Keep any extra custom quests that might have been in saved data but not in initial
        const extras = savedQuests.filter((q) => !initialQuests.some((iq) => iq.id === q.id));
        let mergedAll = [...mergedBase, ...extras];

        // Ensure safety-cushion quest exists
        if (!mergedAll.some((q) => q.id === 'safety-cushion')) {
          const sc = initialQuests.find((q) => q.id === 'safety-cushion');
          if (sc) mergedAll = [sc, ...mergedAll];
        }

        // Put safety-cushion quest first
        const scIndex = mergedAll.findIndex((q) => q.id === 'safety-cushion');
        if (scIndex > 0) {
          const [sc] = mergedAll.splice(scIndex, 1);
          mergedAll = [sc, ...mergedAll];
        }

        setQuests(mergedAll);
        setAchievements(data.achievements || initialAchievements);
        setShopItems(data.shopItems || initialShopItems);
      } catch (e) {
        console.error('Failed to load game data:', e);
      }
    } else {
      // First run: make sure quests are set (safety-cushion is already first in initialQuests)
      setQuests(initialQuests);
    }
  }, []);

  // Save to localStorage whenever state changes
  useEffect(() => {
    const dataToSave = {
      hasCompletedOnboarding,
      userProfile,
      quests,
      achievements,
      shopItems,
    };
    localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));
  }, [hasCompletedOnboarding, userProfile, quests, achievements, shopItems]);

  const completeOnboarding = () => {
    setHasCompletedOnboarding(true);
  };

  const updateQuest = (questId: string, progress: number) => {
    setQuests(prevQuests =>
      prevQuests.map(quest =>
        quest.id === questId ? { ...quest, progress: Math.min(progress, 100) } : quest
      )
    );
  };

  const completeQuest = (questId: string) => {
    const quest = quests.find(q => q.id === questId);
    if (!quest || quest.completed) return;

    setQuests(prevQuests =>
      prevQuests.map(q =>
        q.id === questId ? { ...q, completed: true, progress: 100 } : q
      )
    );

    setUserProfile(prev => {
      const newXP = prev.xp + quest.xpReward;
      const newLevel = Math.floor(newXP / 200) + 1;
      return {
        ...prev,
        xp: newXP,
        level: newLevel,
        coins: prev.coins + quest.reward,
        completedQuests: prev.completedQuests + 1,
      };
    });

    // Check for achievements
    if (userProfile.completedQuests === 0) {
      unlockAchievement('1'); // First quest
    }
    if (userProfile.completedQuests + 1 >= 10) {
      unlockAchievement('4'); // 10 quests
    }
    if (userProfile.coins + quest.reward >= 1000) {
      unlockAchievement('2'); // 1000 coins
    }
  };

  const unlockAchievement = (achievementId: string) => {
    setAchievements(prevAchievements =>
      prevAchievements.map(achievement =>
        achievement.id === achievementId && !achievement.unlocked
          ? { ...achievement, unlocked: true, unlockedAt: new Date() }
          : achievement
      )
    );

    setUserProfile(prev => ({
      ...prev,
      unlockedAchievements: achievements.filter(a => a.unlocked).length + 1,
    }));
  };

  const purchaseItem = (itemId: string) => {
    const item = shopItems.find(i => i.id === itemId);
    if (!item || item.purchased || userProfile.coins < item.price) return;

    setShopItems(prevItems =>
      prevItems.map(i =>
        i.id === itemId ? { ...i, purchased: true } : i
      )
    );

    setUserProfile(prev => ({
      ...prev,
      coins: prev.coins - item.price,
    }));
  };

  const updateProfile = (updates: Partial<UserProfile>) => {
    setUserProfile(prev => ({ ...prev, ...updates }));
  };

  return (
    <GameContext.Provider
      value={{
        userProfile,
        quests,
        achievements,
        shopItems,
        hasCompletedOnboarding,
        completeOnboarding,
        updateQuest,
        completeQuest,
        unlockAchievement,
        purchaseItem,
        updateProfile,
      }}
    >
      {children}
    </GameContext.Provider>
  );
}

export function useGame() {
  const context = useContext(GameContext);
  if (context === undefined) {
    throw new Error('useGame must be used within a GameProvider');
  }
  return context;
}
